Java Design Patterns
===================

There are 23 classic "Gang of Four" (GoF) design patterns, grouped into three categories:

1. Creational Patterns:
   - Singleton
   - Factory Method
   - Abstract Factory
   - Builder
   - Prototype

2. Structural Patterns:
   - Adapter
   - Bridge
   - Composite
   - Decorator
   - Facade
   - Flyweight
   - Proxy

3. Behavioral Patterns:
   - Chain of Responsibility
   - Command
   - Interpreter
   - Iterator
   - Mediator
   - Memento
   - Observer
   - State
   - Strategy
   - Template Method
   - Visitor

Most Commonly Used Patterns:
---------------------------
- Singleton
- Factory Method
- Builder
- Observer
- Strategy
- Decorator
- Proxy
- Adapter
- Template Method

Example: Singleton Pattern in Java
---------------------------------

public class Singleton {
    private static Singleton instance;
    private Singleton() {}
    public static synchronized Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
    public void show() {
        System.out.println("Singleton instance");
    }
}

// Usage:
// Singleton s = Singleton.getInstance();
// s.show();

Example: Factory Method Pattern in Java
--------------------------------------

interface Product {
    void use();
}
class ConcreteProductA implements Product {
    public void use() { System.out.println("Using Product A"); }
}
class ConcreteProductB implements Product {
    public void use() { System.out.println("Using Product B"); }
}
class ProductFactory {
    public static Product createProduct(String type) {
        if ("A".equals(type)) return new ConcreteProductA();
        else return new ConcreteProductB();
    }
}

// Usage:
// Product p = ProductFactory.createProduct("A");
// p.use();

(You can request code examples for any other pattern!)
// Example: Observer Pattern in Java
---------------------------------
import java.util.ArrayList;
import java.util.List;
interface Observer {
    void update(String message);
}
interface Subject {
    void registerObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers(String message);
}
class ConcreteSubject implements Subject {
    private List<Observer> observers = new ArrayList<>();
    
    @Override
    public void registerObserver(Observer observer) {
        observers.add(observer);
    }
    
    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }
    
    @Override
    public void notifyObservers(String message) {
        for (Observer observer : observers) {
            observer.update(message);
        }
    }
}
class ConcreteObserver implements Observer {
    private String name;
    
    public ConcreteObserver(String name) {
        this.name = name;
    }
    
    @Override
    public void update(String message) {
        System.out.println(name + " received: " + message);
    }
}
// Usage:
public class ObserverPatternExample {
    public static void main(String[] args) {
        ConcreteSubject subject = new ConcreteSubject();
        
        ConcreteObserver observer1 = new ConcreteObserver("Observer 1");
        ConcreteObserver observer2 = new ConcreteObserver("Observer 2");
        
        subject.registerObserver(observer1);
        subject.registerObserver(observer2);
        
        subject.notifyObservers("Hello Observers!");
        
        subject.removeObserver(observer1);
        
        subject.notifyObservers("Goodbye Observer 1!");
    }
}
// Output:
// Observer 1 received: Hello Observers!
// Observer 2 received: Hello Observers!
// Observer 2 received: Goodbye Observer 1!
// Example: Strategy Pattern in Java
--------------------------------
import java.util.Arrays;
interface SortingStrategy {
    void sort(int[] array);
}
class BubbleSort implements SortingStrategy {
    @Override
    public void sort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}
class QuickSort implements SortingStrategy {
    @Override
    public void sort(int[] array) {
        Arrays.sort(array);
    }
}
class Sorter {
    private SortingStrategy strategy;
    
    public Sorter(SortingStrategy strategy) {
        this.strategy = strategy;
    }
    
    public void setStrategy(SortingStrategy strategy) {
        this.strategy = strategy;
    }
    
    public void sort(int[] array) {
        strategy.sort(array);
    }
}
// Usage:
public class StrategyPatternExample {
    public static void main(String[] args) {
        int[] array = {5, 3, 8, 6, 2};
        
        Sorter sorter = new Sorter(new BubbleSort());
        sorter.sort(array);
        System.out.println("Bubble Sort: " + Arrays.toString(array));
        
        array = new int[]{5, 3, 8, 6, 2}; // Reset array
        sorter.setStrategy(new QuickSort());
        sorter.sort(array);
        System.out.println("Quick Sort: " + Arrays.toString(array));
    }
}
// Output:
// Bubble Sort: [2, 3, 5, 6, 8]
// Quick Sort: [2, 3, 5, 6, 8]
// Example: Decorator Pattern in Java
--------------------------------
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
interface TextReader {
    String read();
}
class SimpleTextReader implements TextReader {
    private String filePath;

    public SimpleTextReader(String filePath) {
        this.filePath = filePath;
    }

    @Override
    public String read() {
        StringBuilder content = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                content.append(line).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return content.toString();
    }
}
class TextReaderDecorator implements TextReader {
    protected TextReader reader;

    public TextReaderDecorator(TextReader reader) {
        this.reader = reader;
    }

    @Override
    public String read() {
        return reader.read();
    }
}
	class UpperCaseDecorator extends TextReaderDecorator {
    public UpperCaseDecorator(TextReader reader) {
        super(reader);
    }

    @Override
    public String read() {
        return super.read().toUpperCase();
    }
}
class LineNumberDecorator extends TextReaderDecorator {
    public LineNumberDecorator(TextReader reader) {
        super(reader);
    }

    @Override
    public String read() {
        String[] lines = super.read().split("\n");
        StringBuilder numberedContent = new StringBuilder();
        for (int i = 0; i < lines.length; i++) {
            numberedContent.append((i + 1)).append(": ").append(lines[i]).append("\n");
        }
        return numberedContent.toString();
    }
}
// Usage:
public class DecoratorPatternExample {
    public static void main(String[] args) {
        TextReader reader = new SimpleTextReader("example.txt");
        
        // Decorate with UpperCase
        TextReader upperCaseReader = new UpperCaseDecorator(reader);
        System.out.println("Upper Case Content:\n" + upperCaseReader.read());
        
        // Decorate with Line Numbers
        TextReader numberedReader = new LineNumberDecorator(reader);
        System.out.println("Numbered Content:\n" + numberedReader.read());
    }
}
// Output:
// Upper Case Content:
// 1: THIS IS THE CONTENT OF THE FILE.
// 2: IT IS IN UPPER CASE.
// Numbered Content:
// 1: This is the content of the file.
// 2: It is in upper case.
// Example: Proxy Pattern in Java
--------------------------------
import java.util.HashMap;
import java.util.Map;
interface Image {
    void display();
}
class RealImage implements Image {
    private String fileName;

    public RealImage(String fileName) {
        this.fileName = fileName;
        loadFromDisk();
    }

    private void loadFromDisk() {
        System.out.println("Loading " + fileName);
    }

    @Override
    public void display() {
        System.out.println("Displaying " + fileName);
    }
}
class ProxyImage implements Image {
    private RealImage realImage;
    private String fileName;
    private static Map<String, RealImage> imageCache = new HashMap<>();

    public ProxyImage(String fileName) {
        this.fileName = fileName;
    }

    @Override
    public void display() {
        if (imageCache.containsKey(fileName)) {
            realImage = imageCache.get(fileName);
        } else {
            realImage = new RealImage(fileName);
            imageCache.put(fileName, realImage);
        }
        realImage.display();
    }
}
// Usage:
public class ProxyPatternExample {
    public static void main(String[] args) {
        Image image1 = new ProxyImage("image1.jpg");
        Image image2 = new ProxyImage("image2.jpg");
        
        // First time loading images
        image1.display();
        image2.display();
        
        // Second time, should use cached images
        image1.display();
        image2.display();
    }
}
// Output:
// Loading image1.jpg
// Displaying image1.jpg
// Loading image2.jpg
// Displaying image2.jpg
// Displaying image1.jpg
// Displaying image2.jpg
// Example: Adapter Pattern in Java
--------------------------------
interface Target {
    void request();
}
class Adaptee {
    public void specificRequest() {
        System.out.println("Specific request from Adaptee");
    }
}
class Adapter implements Target {
    private Adaptee adaptee;

    public Adapter(Adaptee adaptee) {
        this.adaptee = adaptee;
    }

    @Override
    public void request() {
        adaptee.specificRequest();
    }
}
// Usage:
	public class AdapterPatternExample {
    public static void main(String[] args) {
        Adaptee adaptee = new Adaptee();
        Target target = new Adapter(adaptee);
        
        target.request(); // Calls the specificRequest method of Adaptee
    }
}
// Output:
// Specific request from Adaptee
// Example: Template Method Pattern in Java
--------------------------------
abstract class AbstractClass {
    // Template method
    public final void templateMethod() {
        step1();
        step2();
        step3();
    }

    protected abstract void step1();
    protected abstract void step2();

    private void step3() {
        System.out.println("Step 3: Common implementation");
    }
}
class ConcreteClassA extends AbstractClass {
    @Override
    protected void step1() {
        System.out.println("ConcreteClassA: Step 1 implementation");
    }

    @Override
    protected void step2() {
        System.out.println("ConcreteClassA: Step 2 implementation");
    }
}
class ConcreteClassB extends AbstractClass {
    @Override
    protected void step1() {
        System.out.println("ConcreteClassB: Step 1 implementation");
    }

    @Override
    protected void step2() {
        System.out.println("ConcreteClassB: Step 2 implementation");
    }
}
// Usage:
public class TemplateMethodPatternExample {
    public static void main(String[] args) {
        AbstractClass classA = new ConcreteClassA();
        classA.templateMethod();
        
        System.out.println();
        
        AbstractClass classB = new ConcreteClassB();
        classB.templateMethod();
    }
}
// Output:
// ConcreteClassA: Step 1 implementation
// ConcreteClassA: Step 2 implementation
	
	// Step 3: Common implementation
	//
	// ConcreteClassB: Step 1 implementation
	// ConcreteClassB: Step 2 implementation
	// Step 3: Common implementation
	// Example: Builder Pattern in Java
	--------------------------------
	import java.util.ArrayList;
	import java.util.List;
		
			class Product {
    private List<String> parts = new ArrayList<>();

    public void addPart(String part) {
        parts.add(part);
    }

    public void showParts() {
        System.out.println("Product Parts: " + String.join(", ", parts));
    }
    }
    class Builder {
    		private Product product;
    		public Builder() {
        product = new Product();
        }
        public Builder addPart(String part) {
            product.addPart(part);
            return this;
        }
        public Product build() {
            return product;
        }
        }
        // Usage:
        public class BuilderPatternExample {
        public static void main(String[] args) {
            Product product = new Builder()
                .addPart("Part A")
                .addPart("Part B")
                .addPart("Part C")
                .build();
            
            product.showParts(); // Output: Product Parts: Part A, Part B, Part C
        }
        }
        // Output:
        // Product Parts: Part A, Part B, Part C
        // Example: Flyweight Pattern in Java
        import java.util.HashMap;
        import java.util.Map;
        interface Flyweight {
            void operation(String extrinsicState);
        }
        class ConcreteFlyweight implements Flyweight {
        private String intrinsicState;
        public ConcreteFlyweight(String intrinsicState) {
            this.intrinsicState = intrinsicState;
        }
        @Override
        public void operation(String extrinsicState) {
            System.out.println("Intrinsic State: " + intrinsicState + ", Extrinsic State: " + extrinsicState);
        }
        }
        class FlyweightFactory {
        private Map<String, Flyweight> flyweights = new HashMap<>();
        public Flyweight getFlyweight(String intrinsicState) {
            if (!flyweights.containsKey(intrinsicState)) {
                flyweights.put(intrinsicState, new ConcreteFlyweight(intrinsicState));
            }
            return flyweights.get(intrinsicState);
        }
        }
        // Usage:
        public class FlyweightPatternExample {
            public static void main(String[] args) {
                FlyweightFactory factory = new FlyweightFactory();
                
                Flyweight flyweight1 = factory.getFlyweight("State A");
                flyweight1.operation("External State 1");
                
                Flyweight flyweight2 = factory.getFlyweight("State A");
                flyweight2.operation("External State 2");
                
                Flyweight flyweight3 = factory.getFlyweight("State B");
                flyweight3.operation("External State 3");
            }
        }
        // Output:
        // Intrinsic State: State A, Extrinsic State: External State 1
        // Intrinsic State: State A, Extrinsic State: External State 2
        // Intrinsic State: State B, Extrinsic State: External State 3
        // Example: Chain of Responsibility Pattern in Java
        import java.util.ArrayList;
        import java.util.List;
        	abstract class Handler {
            protected Handler nextHandler;

            public void setNextHandler(Handler nextHandler) {
                this.nextHandler = nextHandler;
            }

            public abstract void handleRequest(String request);
        }
    		        class ConcreteHandlerA extends Handler {
            @Override
            public void handleRequest(String request) {
                if (request.equals("A")) {
                    System.out.println("Handler A handled request: " + request);
                } else if (nextHandler != null) {
                    nextHandler.handleRequest(request);
                }
            }
        }
        class ConcreteHandlerB extends Handler {
            @Override
            public void handleRequest(String request) {
                if (request.equals("B")) {
                    System.out.println("Handler B handled request: " + request);
                } else if (nextHandler != null) {
                    nextHandler.handleRequest(request);
                }
            }
        }
        class ConcreteHandlerC extends Handler {
            @Override
            public void handleRequest(String request) {
                if (request.equals("C")) {
                    System.out.println("Handler C handled request: " + request);
                } else if (nextHandler != null) {
                    nextHandler.handleRequest(request);
                }
            }
        }
        // Usage:
        public class ChainOfResponsibilityPatternExample {
            public static void main(String[] args) {
                Handler handlerA = new ConcreteHandlerA();
                Handler handlerB = new ConcreteHandlerB();
                Handler handlerC = new ConcreteHandlerC();

                handlerA.setNextHandler(handlerB);
                handlerB.setNextHandler(handlerC);

                // Test the chain with different requests
                handlerA.handleRequest("A"); // Handled by Handler A
                handlerA.handleRequest("B"); // Handled by Handler B
                handlerA.handleRequest("C"); // Handled by Handler C
                handlerA.handleRequest("D"); // No handler for D
            }
        }
        // Output:
        // Handler A handled request: A
        // Handler B handled request: B
        // Handler C handled request: C
        // No handler for D	
        // Example: Command Pattern in Java	
    			
    			
